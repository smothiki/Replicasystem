from structs import Request
from structs import Requests
from bank import Bank
import json
import sys
import time

# server process that handles request form client

class Server(process):
   def setup(servers,index,client,name,id1):
     self.bankobj=Bank(name,id1)
     output(str(index))

   def main():
     await(some(received(("request",request),from_=p)))
     await(False)

   # when receiving request from others, enque and reply
   def receive(msg=("request",request),from_=p):
     if request.outcome in ["processed","inconsistent","insufficientfunds"]:
       self.bankobj.set(request)
     elif request.transaction == "deposit":
       request=self.bankobj.deposit(request)
     elif request.transaction == "withdraw":
       request=self.bankobj.withdraw(request)
     elif request.transaction == "getbalance":
       request=self.bankobj.getbalance(request)
     if index != 2:
       send(("request",request),to=servers[index+1])
      #  output("<%r,%s,%r>"%(request.requestid,request.outcome,request.balance))
     else :
      #  output("sending reply to client")
      #  output("<%r,%s,%r>"%(request.requestid,request.outcome,request.balance))
       send(("reply",request),to=client)

# client process that sends request to server

class Client(process):
   def setup(chain,timed):
     self.waitfor = set()
     self.requests=Requests(3,"getbalance")
     requests.getRequestList()
     self.done = False

   def main():
     for request in self.requests.requests:
       if request.requestid in waitfor:
         waitfor.remove(request.requestid)
       waitfor.add(request.requestid)
       if request.transaction == "getbalance" :
         send(("request",request,),to=chain[2])
       else :
         send(("request",request),to=chain[0])

     if await(False):pass
     elif timeout(timed):
       output("timeout")
     output("finished request")


   def receive(msg=('reply',request),from_=p):
     if request.requestid in waitfor:
       waitfor.remove(request.requestid)
     output("client")
     output("<%r,%s,%r>"%(request.requestid,request.outcome,request.balance))
     if len(waitfor) == 0:
       done =True



def main():
   configs = json.loads(open("/Users/ram/deistests/src/github.com/replicasystem/config/config.json").read())
   Nserver = int(configs["chainlength"])
   Nclient = int(configs["clients"])
   timeout = 1
   config(channel="fifo")
   servers = list(new(Server, num=Nserver))
   client = list(new(Client, num=Nclient))
   for i,p in enumerate(list(servers)):
     setup(p,(servers,i,client,"wells","123"))
   start(servers)
   setup(client, [servers,timeout])
   start(client)
