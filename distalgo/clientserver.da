from structs import Request
from structs import Requests
from bank import Bank
import json
import sys
import time
import _thread

class Master(process):

    def setup(servers,client,Nlength):
        self.serverisAlive={}
        self.head=0
        self.tail=Nlength-1
        for i, s in enumerate(list(servers)):
            serverisAlive[i]= 0

    def checkHealthmsg(threadName, delay):
        while True:
             time.sleep(delay)
             output("moon %r."%(serverisAlive))
             for i, s in enumerate(list(servers)):
                if serverisAlive[i] == 0:
                    if i == head:
                        output("here1")
                        newHead = i+1
                        send(('ImHead', newHead), to=client)
                    elif i == tail:
                        output("here2")
                        newTail = i-1
                        send(('ImTail', newTail), to=s[i-2])
                        send(('ImTail', newTail), to=client)
                    else:
                        send(('urnext', i+1), to=s[i-1])

    def messuphead(threadName,headkill):
        time.sleep(headkill)
        output("killing head")
        serverisAlive[0]=0

    def messuptail(threadName,tailkill):
        time.sleep(tailkill)
        output("killing tail")
        serverisAlive[Nlength-1]=0

    def messupserver(threadName,index,timetokill):
        time.sleep(timetokill)
        output("killing server")
        serverisAlive[index]=0

    def receive(msg=('HealthCheckmsg', serverId), from_=p):
        output("healthcheck received%r."%(serverId))
        serverisAlive[serverId] = 1

    def main():
        output("%r."%(self.serverisAlive))
        _thread.start_new_thread( checkHealthmsg, ("Thread", 15))
        _thread.start_new_thread( messuphead, ("Thread1", 4))
        _thread.start_new_thread( messuptail, ("Thread2", 7))
        _thread.start_new_thread( messupserver, ("Thread3",1,9))
        await(False)

# server process that handles request form client

class Server(process):
   def setup(servers,index,client,Nlength,master):
     self.bankobj=Bank("wells","123")
     self.startindex=0
     self.head=servers[0]
     if index == Nlength-1:
         output(str(index))
         self.next=client
     else:
         self.next=servers[index+1]
     self.endindex=Nlength-1

     output("serverindex"+str(index))

   def main():
     _thread.start_new_thread(sendHealthCheck, ("Thread", 5, self.index, self.master) )
     await(some(received(("request",request),from_=p)))
     await(False)


   def sendHealthCheck( threadName, delay, index, master):
     output("inside sendHealthCheck")
     output(" %r."%(index))
     while True:
       time.sleep(delay)
       send(('HealthCheckmsg', index),to=master)


   def receive(msg=('ImTail',tindex),from_=p):
      output("updated tail server end")
      self.endindex=tindex


   def receive(msg=('urnext',tindex),from_=p):
      output("updated next server end")
      self.next=servers[tindex]

   # when receiving request from others, enque and reply
   def receive(msg=("request",request),from_=p):
     if request.outcome in ["processed","inconsistent","insufficientfunds"]:
       self.bankobj.set(request)
     elif request.transaction == "deposit":
       request=self.bankobj.deposit(request)
     elif request.transaction == "withdraw":
       request=self.bankobj.withdraw(request)
     elif request.transaction == "getbalance":
       request=self.bankobj.getbalance(request)
     if index < self.endindex:
       send(("request",request),to=self.next)
       output("<%r,%s,%r>"%(request.requestid,request.outcome,request.balance))
     else :
       output("sending reply to client")
      #  output("<%r,%s,%r>"%(request.requestid,request.outcome,request.balance))
       send(("reply",request),to=client)

# client process that sends request to server

class Client(process):
   def setup(chain,master,Nlength):
     self.waitfor = set()
     self.requests=Requests(3,"getbalance")
     requests.getRequestList()
     self.head=chain[0]
     self.tail=chain[Nlength-1]
     self.done = False

   def main():
     for request in self.requests.requests:
       if request.requestid in waitfor:
         waitfor.remove(request.requestid)
       waitfor.add(request.requestid)
       time.sleep(2)
       if request.transaction == "getbalance" :
         send(("request",request,),to=self.tail)
       else :
         send(("request",request),to=self.head)

     if await(False):pass
     elif timeout(20):
       output("timeout")
     output("finished request")


   def receive(msg=('ImHead',index),from_=p):
       output("new head updated")
       self.head=chain[index]

   def receive(msg=('ImTail',index),from_=p):
       self.tail=chain[index]

   def receive(msg=('reply',request),from_=p):
     if request.requestid in waitfor:
       waitfor.remove(request.requestid)
     output("client side reply")
     output("<%r,%s,%r>"%(request.requestid,request.outcome,request.balance))
     if len(waitfor) == 0:
       done =True


def main():
   configs = json.loads(open("/Users/ram/deistests/src/github.com/replicasystem/config/config01.json").read())
   Nserver = int(configs["chainlength"])
   timeout = 1
   config(channel="fifo")
   servers = list(new(Server, num=Nserver))
   client = new(Client, num=1)
   master = new(Master, num=1)
   for i,p in enumerate(list(servers)):
     setup(p,(servers,i,client,Nserver,master))
   start(servers)
   setup(client, [servers,master,Nserver])
   setup(master,[servers, client,Nserver])
   start(client)
   start(master)
